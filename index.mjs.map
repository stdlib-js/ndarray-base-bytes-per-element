{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport BYTES_PER_ELEMENT from './bytes_per_element.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of bytes per element for a provided underlying ndarray data type.\n*\n* @param {*} dtype - data type\n* @returns {(PositiveInteger|null)} number of bytes per element\n*\n* @example\n* var nbytes = bytesPerElement( 'float64' );\n* // returns 8\n*\n* nbytes = bytesPerElement( 'generic' );\n* // returns null\n*\n* @example\n* import structFactory from '@stdlib/dstructs-struct';\n*\n* var schema = [\n*     {\n*         'name': 'value',\n*         'type': 'float64'\n*     }\n* ];\n* var Struct = structFactory( schema );\n* // returns <Function>\n*\n* var nbytes = bytesPerElement( Struct );\n* // returns 8\n*/\nfunction bytesPerElement( dtype ) {\n\tvar v;\n\tif ( isString( dtype ) ) {\n\t\treturn BYTES_PER_ELEMENT[ dtype ] || null;\n\t}\n\tif ( dtype ) {\n\t\tv = dtype.byteLength;\n\t\tif ( isPositiveInteger( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default bytesPerElement;\n"],"names":["bytesPerElement","dtype","v","isString","BYTES_PER_ELEMENT","byteLength","isPositiveInteger"],"mappings":";;ucAyDA,SAASA,EAAiBC,GACzB,IAAIC,EACJ,OAAKC,EAAUF,GACPG,EAAmBH,IAAW,KAEjCA,IACJC,EAAID,EAAMI,WACLC,EAAmBJ,IAChBA,EAGF,IACR"}